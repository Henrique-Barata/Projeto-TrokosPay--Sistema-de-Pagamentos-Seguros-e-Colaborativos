
// Standard extensions get all permissions by default

grant codeBase "file:${{java.ext.dirs}}/*" {
        permission java.security.AllPermission;
};

grant codeBase "file:${java.home}/lib/ext/*" { 
permission java.security.AllPermission; 
};

grant codeBase "File:TrokosServer.jar" {
  permission java.io.FilePermission "<<ALL FILES>>", "read, write";
  permission java.net.SocketPermission "*:1024-", "accept, listen";
  permission java.util.PropertyPermission "javax.net.ssl.keyStore", "read, write";
  permission java.util.PropertyPermission "javax.net.ssl.keyStorePassword", "read, write";
};

grant codeBase "File:bin/" {
  permission java.io.FilePermission "<<ALL FILES>>", "read, write";
  permission java.net.SocketPermission "*:1024-", "accept, listen";
  permission java.util.PropertyPermission "javax.net.ssl.keyStore", "read, write";
  permission java.util.PropertyPermission "javax.net.ssl.keyStorePassword", "read, write";
};


// default permissions granted to all domains

grant {
        // Allows any thread to stop itself using the java.lang.Thread.stop()
        // method that takes no argument.
        // Note that this permission is granted by default only to remain
        // backwards compatible.
        // It is strongly recommended that you either remove this permission
        // from this policy file or further restrict it to code sources
        // that you specify, because Thread.stop() is potentially unsafe.
        // See the API specification of java.lang.Thread.stop() for more
        // information.
        permission java.lang.RuntimePermission "stopThread";

        // allows anyone to listen on dynamic ports
        permission java.net.SocketPermission "localhost:0", "listen";

        // "standard" properies that can be read by anyone

        permission java.util.PropertyPermission "java.version", "read";
        permission java.util.PropertyPermission "java.vendor", "read";
        permission java.util.PropertyPermission "java.vendor.url", "read";
        permission java.util.PropertyPermission "java.class.version", "read";
        permission java.util.PropertyPermission "os.name", "read";
        permission java.util.PropertyPermission "os.version", "read";
        permission java.util.PropertyPermission "os.arch", "read";
        permission java.util.PropertyPermission "file.separator", "read";
        permission java.util.PropertyPermission "path.separator", "read";
        permission java.util.PropertyPermission "line.separator", "read";

        permission java.util.PropertyPermission "java.specification.version", "read";
        permission java.util.PropertyPermission "java.specification.vendor", "read";
        permission java.util.PropertyPermission "java.specification.name", "read";

        permission java.util.PropertyPermission "java.vm.specification.version", "read";
        permission java.util.PropertyPermission "java.vm.specification.vendor", "read";
        permission java.util.PropertyPermission "java.vm.specification.name", "read";
        permission java.util.PropertyPermission "java.vm.version", "read";
        permission java.util.PropertyPermission "java.vm.vendor", "read";
        permission java.util.PropertyPermission "java.vm.name", "read";
	permission java.util.PropertyPermission "javax.net.ssl.trustStore", "read, write";
	permission java.util.PropertyPermission "javax.net.ssl.trustStorePassword", "read, write";
	
	
  permission java.io.FilePermission "<<ALL FILES>>", "read, write";
  permission java.net.SocketPermission "127.0.0.1:45678", "connect";
  permission java.util.PropertyPermission "javax.net.ssl.trustStore", "write";
  permission java.util.PropertyPermission "javax.net.ssl.trustStorePassword", "write";
  permission java.util.PropertyPermission "javax.net.ssl.keyStore", "write, read";
  permission java.util.PropertyPermission "javax.net.ssl.keyStorePassword", "read, write";
};

